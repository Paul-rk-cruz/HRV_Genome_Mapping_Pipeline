Mar-25 16:03:43.570 [main] DEBUG nextflow.cli.Launcher - $> nextflow run /Users/Kurtisc/Downloads/CURRENT/Virus_Genome_Mapping_Pipeline/Virus_Genome_Mapping_Pipeline/main.nf --helpMsg
Mar-25 16:03:43.630 [main] INFO  nextflow.cli.CmdRun - N E X T F L O W  ~  version 20.10.0
Mar-25 16:03:43.642 [main] INFO  nextflow.cli.CmdRun - Launching `/Users/Kurtisc/Downloads/CURRENT/Virus_Genome_Mapping_Pipeline/Virus_Genome_Mapping_Pipeline/main.nf` [cheesy_kimura] - revision: f3fce83e10
Mar-25 16:03:43.736 [main] DEBUG nextflow.Session - Session uuid: 569d62b9-1d28-4a8d-9fb7-2d0f21e48ac7
Mar-25 16:03:43.736 [main] DEBUG nextflow.Session - Run name: cheesy_kimura
Mar-25 16:03:43.738 [main] DEBUG nextflow.Session - Executor pool size: 20
Mar-25 16:03:43.777 [main] DEBUG nextflow.cli.CmdRun - 
  Version: 20.10.0 build 5430
  Created: 01-11-2020 15:14 UTC (07:14 PDT)
  System: Mac OS X 10.15.7
  Runtime: Groovy 3.0.5 on OpenJDK 64-Bit Server VM 11.0.6+8-b765.1
  Encoding: UTF-8 (UTF-8)
  Process: 21352@uwvirologys-iMac.local [128.208.11.51]
  CPUs: 20 - Mem: 72 GB (43 GB) - Swap: 3 GB (1.5 GB)
Mar-25 16:03:43.796 [main] DEBUG nextflow.Session - Work-dir: /Users/Kurtisc/Downloads/CURRENT/Virus_Genome_Mapping_Pipeline/Virus_Genome_Mapping_Pipeline/work [Mac OS X]
Mar-25 16:03:43.796 [main] DEBUG nextflow.Session - Script base path does not exist or is not a directory: /Users/Kurtisc/Downloads/CURRENT/Virus_Genome_Mapping_Pipeline/Virus_Genome_Mapping_Pipeline/bin
Mar-25 16:03:43.833 [main] DEBUG nextflow.Session - Observer factory: TowerFactory
Mar-25 16:03:43.835 [main] DEBUG nextflow.Session - Observer factory: DefaultObserverFactory
Mar-25 16:03:43.944 [main] DEBUG nextflow.Session - Session start invoked
Mar-25 16:03:44.330 [main] ERROR nextflow.cli.Launcher - Script compilation error
- file : /Users/Kurtisc/Downloads/CURRENT/Virus_Genome_Mapping_Pipeline/Virus_Genome_Mapping_Pipeline/main.nf
- cause: Unexpected input: '{\n/*\n * Fastq File Processing\n * \n * Fastqc\n */\nprocess fastqc {\n\ttag "$prefix"\n\tpublishDir "${params.outdir}/fastQC", mode: 'copy',\n\t\tsaveAs: {filename -> filename.indexOf(".zip") > 0 ? "zips/$filename" : "$filename"}\n\n\tinput:\n\tset val(name), file(reads) from raw_reads_fastqc\n\n\toutput:\n\tfile '*_fastqc.{zip,html}' into fastqc_results\n\tfile '.command.out' into fastqc_stdout\n\n\tscript:\n\n\tprefix = name - ~/(_S[0-9]{2})?(_L00[1-9])?(.R1)?(_1)?(_R1)?(_trimmed)?(_val_1)?(_00*)?(\.fq)?(\.fastq)?(\.gz)?$/\n\t"""\n\tmkdir tmp\n\tfastqc -t ${task.cpus} -dir tmp $reads\n\trm -rf tmp\n\t"""\n}\n\n/*\n * Processing: Trim fastq sequence reads\n * \n * Trimmomatic\n */\nprocess trimming {\n\ttag "$prefix"\n\tpublishDir "${params.outdir}/fastq_processing", mode: 'copy',\n\t\tsaveAs: {filename ->\n\t\t\tif (filename.indexOf("_fastqc") > 0) "../qc/$filename"\n\t\t\telse if (filename.indexOf(".log") > 0) "logs/$filename"\n      else if (params.filename.indexOf(".fastq.gz")) "trimmed/$filename"\n\t\t\telse null\n\t}\n\n\tinput:\n\tset val(name), file(reads) from raw_reads_trimming\n\n\toutput:\n\tfile '*_paired_*.fastq.gz' into trimmed_paired_reads,trimmed_paired_reads_bwa,virustrimmed_paired_reads_irus\n\tfile '*_unpaired_*.fastq.gz' into trimmed_unpaired_reads\n\tfile '*_fastqc.{zip,html}' into trimmomatic_fastqc_reports\n\tfile '*.log' into trimmomatic_results\n\n\tscript:\n\tprefix = name - ~/(_S[0-9]{2})?(_L00[1-9])?(.R1)?(_1)?(_R1)?(_trimmed)?(_val_1)?(_00*)?(\.fq)?(\.fastq)?(\.gz)?$/\n\t"""\n\ttrimmomatic PE -threads ${task.cpus} -phred33 $reads $prefix"_paired_R1.fastq" $prefix"_unpaired_R1.fastq" $prefix"_paired_R2.fastq" $prefix"_unpaired_R2.fastq" ILLUMINACLIP:${params.trimmomatic_adapters_file}:${params.trimmomatic_adapters_parameters} SLIDINGWINDOW:${params.trimmomatic_window_length}:${params.trimmomatic_window_value} MINLEN:${params.trimmomatic_mininum_length} 2> ${name}.log\n\n\t"""\n}\n\n/*\n * Map sequence reads to local virus database\n */\nprocess map_virus {\n\ttag "$prefix"\n\t// Create new directory\n\tpublishDir "${params.outdir}/map_virus", mode: 'copy',\n\t\tsaveAs: {filename ->\n\t\t\tif (filename.indexOf(".bam") > 0) "mapping/$filename"\n\t\t\telse if (filename.indexOf(".bai") > 0) "mapping/$filename"\n\t}\n\t// Specify inputs and outputs\n\tinput:\n\tset file(readsR1),file(readsR2) from virustrimmed_paired_reads_irus\n    file refvirus from virus_fasta_file\n    file index from virus_index_files.collect()\n\n\toutput:\n\tfile '*_sorted.bam' into mapping_virus_sorted_bam,mapping_virus_sorted_bam_consensus\n    file '*_consensus_masked.fasta' into masked_fasta\n\t// Use these files for consensus generation\n\n\tscript:\n  prefix = readsR1.toString() - '_paired_R1.fastq.gz'\n\t"""\n  bowtie2 -p ${task.cpus} --local -x $refvirus -1 $readsR1 -2 $readsR2 --very-sensitive-local -S $prefix".sam"\n  samtools sort -o $prefix"_sorted.bam" -O bam -T $prefix $prefix".sam"\n  samtools index $prefix"_sorted.bam"\n  samtools flagstat $prefix"_sorted.bam" > $prefix"_flagstat.txt"\n\t"""\n}\n\n/*\n * Generate Consensus\n */\nprocess genome_consensus {\n  tag "$prefix"\n  publishDir "${params.outdir}/map_consensus", mode: 'copy',\n\t\tsaveAs: {filename ->\n\t\t\tif (filename.indexOf("_consensus.fasta") > 0) "consensus/$filename"\n\t\t\telse if (filename.indexOf("_consensus_masked.fasta") > 0) "masked/$filename"\n\t}\n\n  input:\n  file refvirus from virus_fasta_file\n  file sorted_bam from sorted_bam_consensus\n  file sorted_bai from bai_consensus\n\n  output:\n  file '*_consensus.fasta' into consensus_fasta\n\n  script:\n  refname = refvirus.baseName - ~/(\.2)?(\.fasta)?$/\n  """\n  bcftools index "$refname".vcf.gz"\n  cat $refvirus | bcftools consensus "$refname".vcf.gz" > "$refname"_consensus.fasta"\n  bedtools genomecov -bga -ibam $sorted_bam -g $refvirus | awk '\$4 < 20' | bedtools merge > "$refname"_bed4mask.bed"\n  bedtools maskfasta -fi "$refname"_consensus.fasta" -bed "$refname"_bed4mask.bed" -fo "$refname"_consensus_masked.fasta"\n  sed -i 's/$refname/g' "$refname"_consensus_masked.fasta"\n  """\n}\n\n// CODE - Blast Consensus? Specify with --WithBlastConsensus\n\n// CODE - Vapid-like genbank prep? Specify with --GenBankPrep\n\n// To Do\n// \n// Keep testing individual processes\n//' @ line 290, column 3.
   //
     ^

1 error

